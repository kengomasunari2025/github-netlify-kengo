/// <reference path="../typings/bundle.d.ts"/>
/// <reference path="../node_modules/@isoden/eveemi/eveemi.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
// 依存モジュールをインポート
var es6_promise_1 = require('es6-promise');
var utility_1 = require('./utility');
var EveEmi = require('@isoden/eveemi');
var YTPlayer = (function (_super) {
    __extends(YTPlayer, _super);
    function YTPlayer(options) {
        _super.call(this);
        this.isReady = false;
        this.el = document.getElementById(options.el);
        this.options = options;
        this._initialize();
    }
    YTPlayer.ready = function () {
        if (this.queue != null)
            return this.queue;
        var tag = document.createElement('script');
        var firstScriptTag = document.getElementsByTagName('script')[0];
        tag.src = 'https://www.youtube.com/iframe_api';
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        return this.queue = new es6_promise_1.Promise(function (resolve) { return window.onYouTubeIframeAPIReady = resolve; });
    };
    /**
     * 初期化処理
     */
    YTPlayer.prototype._initialize = function () {
        // インスタンスメソッドのコンテキストを束縛
        utility_1.bindAll(this, [
            '_setup',
            '_errorHandler',
            '_readyHandler',
            '_stateChangeHandler',
            '_playbackQualityChangeHandler'
        ]);
        // iframe_apiの読み込みを待ってセットアップを行う。
        YTPlayer.ready().then(this._setup);
    };
    /**
     * 動画を再生する
     */
    YTPlayer.prototype.play = function () {
        if (!this.isReady)
            return;
        this.player.playVideo();
    };
    /**
     * 動画を一時停止する
     */
    YTPlayer.prototype.pause = function () {
        if (!this.isReady)
            return;
        this.player.pauseVideo();
    };
    /**
     * 動画を停止する
     */
    YTPlayer.prototype.stop = function () {
        if (!this.isReady)
            return;
        this.player.stopVideo();
    };
    /**
     * 指定秒数まで動画をシークする
     */
    YTPlayer.prototype.seekTo = function (second, allowSeekAhead) {
        if (!this.isReady)
            return;
        this.player.seekTo(second, allowSeekAhead);
    };
    /**
     * 表示をクリアする
     */
    YTPlayer.prototype.clear = function () {
        if (!this.isReady)
            return;
        this.player.clearVideo();
    };
    /**
     * ボリュームのsetter/getter
     */
    YTPlayer.prototype.volume = function (value) {
        if (!this.isReady)
            return;
        if (typeof value === 'number') {
            return this.player.setVolume(value);
        }
        ;
        this.player.getVolume();
    };
    /**
     * 要素を含めてプレイヤーを削除する
     */
    YTPlayer.prototype.destroy = function () {
        if (!this.isReady)
            return;
        // this.player.destroy();
    };
    /**
     * プレイヤーのインスタンスを生成する
     */
    YTPlayer.prototype._setup = function () {
        this.player = new YT.Player(this.el.id, {
            width: this.options.width,
            height: this.options.height,
            events: this._getEventMap(),
            videoId: this.options.videoId,
            playerVars: this.options.vars
        });
        this.isReady = true;
    };
    /**
     * 動画再生が出来る状態になったら呼ばれる
     */
    YTPlayer.prototype._readyHandler = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this.trigger.apply(this, ['ready'].concat(args));
    };
    /**
     * エラー発生時に呼ばれる
     */
    YTPlayer.prototype._errorHandler = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this.trigger.apply(this, ['error'].concat(args));
    };
    /**
     * 動画の画質を変更した時に呼ばれる
     */
    YTPlayer.prototype._playbackQualityChangeHandler = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this.trigger.apply(this, ['playbackqualitychange'].concat(args));
    };
    /**
     * 動画状態が変更したら呼ばれる
     */
    YTPlayer.prototype._stateChangeHandler = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this.trigger.apply(this, ['statechange'].concat(args));
    };
    /**
     * YT.Playerのオプションに渡すイベントマップ
     */
    YTPlayer.prototype._getEventMap = function () {
        return {
            onError: this._errorHandler,
            onReady: this._readyHandler,
            onStateChange: this._stateChangeHandler,
            onPlaybackQualityChange: this._playbackQualityChangeHandler
        };
    };
    YTPlayer.queue = null;
    YTPlayer.default = {
        width: 560,
        height: 315
    };
    return YTPlayer;
})(EveEmi);
module.exports = YTPlayer;
